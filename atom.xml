<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>H.J.Yang</title>
  
  <subtitle>奎心无佛，此佛非彼佛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-11T15:33:52.479Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>H.J.Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysqldump 翻译</title>
    <link href="http://yoursite.com/2019/08/11/mysqldump/"/>
    <id>http://yoursite.com/2019/08/11/mysqldump/</id>
    <published>2019-08-11T15:15:13.941Z</published>
    <updated>2019-08-11T15:33:52.479Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/08/11/mysqldump/msyql.jpg"></p><a id="more"></a><h1 id="mysqldump-——-一个数据库备份程序"><a href="#mysqldump-——-一个数据库备份程序" class="headerlink" title="mysqldump —— 一个数据库备份程序"></a>mysqldump —— 一个数据库备份程序</h1><blockquote><p><a href="https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html" target="_blank" rel="noopener">原文地址</a></p></blockquote><p>mysqldump 是一个客户端用来执行逻辑备份的工具，产生一个可以用来重新生成原始数据库定义对象和表数据的 SQL 集合。他转存一个或多个数据库备份或者传输到另一个 SQL 服务器。musqldump 命令也可以输出到 CSV、 分隔符的 text 或者 XML 格式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/08/11/mysqldump/msyql.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker 新萌实战</title>
    <link href="http://yoursite.com/2018/09/15/docker/"/>
    <id>http://yoursite.com/2018/09/15/docker/</id>
    <published>2018-09-15T13:36:35.344Z</published>
    <updated>2019-08-11T15:33:46.071Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/15/docker/docker.jpg"></p><a id="more"></a><p>这篇文章，算是这个主页搭建起来的第一篇文章，内容比较简单但不乏有参考其他文章的，先谢过，各路大侠。本文基于 Centos7 的入门实战，详情请参看<a href="https://docs.docker.com/" target="_blank" rel="noopener">官方文档</a>。从简单的从构建第一个镜像开始，到发布 web 应用，会创建 mysql 数据容器 和 tomcat 容器。</p><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>目前，CentOS 仅发行版本中的内核支持 Docker。<br>Docker 运行在 CentOS 7 上，要求系统为 64 位、系统内核版本为 3.10 以上。</p><h3 id="CentOS-安装-Dodker-CE"><a href="#CentOS-安装-Dodker-CE" class="headerlink" title="CentOS 安装 Dodker CE"></a>CentOS 安装 Dodker CE</h3><p>参考<a href="http://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noopener">菜鸟教程</a>或者<a href="https://docs.docker.com/install/linux/docker-ce/centos/#set-up-the-repository" target="_blank" rel="noopener">官网</a></p><p>安装一些必要的系统工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>添加软件源信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>更新 yum 缓存:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>安装 Docker-ce:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>启动 Docker 服务:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start <span class="comment">#或 systemctl start docker</span></span><br></pre></td></tr></table></figure><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>新版的 Docker 使用 /etc/docker/daemon.json（Linux）,如果没有这个文件就创建一个（我本机是没有的）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"http://hub-mirror.c.163.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-Docker-CE"><a href="#删除-Docker-CE" class="headerlink" title="删除 Docker CE"></a>删除 Docker CE</h3><p>执行以下命令来删除 Docker CE：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker-ce</span><br><span class="line"></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/run/docker</span><br><span class="line">rm -rf /etc/docker</span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>可以在 Docker 容器内运行程序，通过使用 <code>docker run</code> 命令在容器内运行一个应用程序。运行程序首先要先获得镜像，获取镜像文件可以通过从仓库 pull, 也可通过 Dockerfile 自行构建。如果执行 <code>docker run</code> 时容器内没有可用的镜像就会尝试从官方获取。</p><h3 id="通过从官方拉去镜像"><a href="#通过从官方拉去镜像" class="headerlink" title="通过从官方拉去镜像"></a>通过从官方拉去镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="通过-Dockerfile-构建"><a href="#通过-Dockerfile-构建" class="headerlink" title="通过 Dockerfile 构建"></a>通过 Dockerfile 构建</h3><p>可以通过命令 <code>docker build -t 镜像名称 Dockerfile文件路径</code> 来自动构建镜像。<br>输入内容(这段 Demo 可以按照<a href="http://localhost:4000/2018/09/13/docker/#more" target="_blank" rel="noopener">官网</a>提供的来，这里自己觉得方便就好)</p><ul><li><p>创建 Dockerfile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># MAINTAINER        H.J.Yang &lt;yhj_box@foxmail.com&gt;</span></span><br><span class="line"><span class="comment"># DOCKER-VERSION    18.06.1-ce, build e68fc7a</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Dockerizing hello/docker: Dockerfile for building hello/docker images</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">FROM       centos:centos7.1.1503</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">"/bin/echo"</span>,<span class="string">"hello_docker"</span>]</span><br></pre></td></tr></table></figure></li><li><p>build 一个镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker  build -t hello/docker:0.1  .</span><br></pre></td></tr></table></figure></li><li><p>查看可用的镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="comment">#或 docker image ls</span></span><br></pre></td></tr></table></figure><ul><li>目前结果如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos3 hello_world]<span class="comment"># docker image ls</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello/docker        0.1                 0838b223b2f7        9 minutes ago       212MB</span><br><span class="line">centos              centos7.1.1503      b96d683c39b0        5 weeks ago         212MB</span><br></pre></td></tr></table></figure></li></ul></li><li><p>运行容器<br>使用 <code>docker run hello/docker:0.1</code> 命令运行后会随机生成一个容器名称，也可通过 <code>--name</code> 参数指定：<code>docker run --name hello hello/docker:0.1</code>, 指定生成的容器名为 hello。</p></li></ul><h2 id="创建-Tomcat-容器"><a href="#创建-Tomcat-容器" class="headerlink" title="创建 Tomcat 容器"></a>创建 Tomcat 容器</h2><p>Java web 要跑起来，就需要一些系统资源和环境变量。容器一旦运行，就不建议手动修改容器内部的配置，若必须进入容器修改那修改后就需要使用 <code>docker commit containerid imagename</code> 来把修改过的容器提交到一个镜像文件。</p><h3 id="创建-Centos7-镜像"><a href="#创建-Centos7-镜像" class="headerlink" title="创建 Centos7 镜像"></a>创建 Centos7 镜像</h3><p>这里就简单的依赖 centos7.1.1503 来创建 Centos7 的基础镜像。先创建一个 Centos7 的基础镜像,主要是安装一些必要工具软件和对容器做一些必要的设置，后面的镜像都依赖这个基础镜像创建。如：下面 Dockerfile 文件中设置了签名和 root 用户的密码后才可用 通过 ssh 连接上运行的镜像容器。</p><ul><li>Dockerfile</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># MAINTAINER        H.J.Yang &lt;yhj_box@foxmail.com&gt;</span></span><br><span class="line"><span class="comment"># DOCKER-VERSION    18.06.1-ce, build e68fc7a</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Dockerizing centos7 : Dockerfile for building centos7 images</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">FROM       centos:centos7.1.1503</span><br><span class="line">MAINTAINER H.J.Yang&lt;yhj_box@foxmail.com&gt;</span><br><span class="line"></span><br><span class="line">ENV TZ <span class="string">"Asia/Shanghai"</span></span><br><span class="line">ENV TERM xterm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RUN yum install -y curl wget tar bzip2 unzip vim-enhanced passwd sudo yum-utils hostname net-tools rsync man &amp;&amp; \</span><br><span class="line">    yum install -y gcc gcc-c++ git make automake cmake patch logrotate python-devel libpng-devel libjpeg-devel &amp;&amp; \</span><br><span class="line">    yum install -y openssh-server &amp;&amp; \</span><br><span class="line">    yum clean all</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成签名</span></span><br><span class="line">RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N <span class="string">""</span></span><br><span class="line">RUN ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N <span class="string">""</span></span><br><span class="line">RUN ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置root用户密码</span></span><br><span class="line">RUN <span class="string">"/bin/echo"</span> root | passwd --stdin root</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除缓存</span></span><br><span class="line">RUN  rm -rf /var/cache/yum</span><br><span class="line"></span><br><span class="line"><span class="comment">#暴露 22 端口</span></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">"/bin/echo"</span>, <span class="string">"centos7 started"</span>]</span><br></pre></td></tr></table></figure><ul><li><p>创建镜像<br><code>docker build -t base/centos7:0.1 .</code></p></li><li><p>运行容器<br><code>docker run -d -p 7777:22 --name centos7 base/centos7:0.1 /usr/sbin/sshd -D</code></p><ul><li>参数：<br> -d 表示在后台运行一个容器<br>-p 表示把宿主机的 7777 端口和容器的 22 端口做映射<br>-D 这个是 sshd 的表示以守护进程的方式启动</li></ul></li><li><p>连接测试<br><code>ssh root@localhost -p 7777</code>，这是在宿主机上访问。若想在非宿主机上访问则需要打开防火墙，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=7777/tcp</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建-Tomcat-镜像"><a href="#创建-Tomcat-镜像" class="headerlink" title="创建 Tomcat 镜像"></a>创建 Tomcat 镜像</h3><p>创建前需要去下载 tomcat 和 jdk 这两必要的系统环境，注意下载 liunx 版本的，win 的我没试过能不能在 liunx 下跑。但是 Java native 方法这些我估计是不行。新建一个 tomcat 目录把下载好的 jdk 和 tomcat 都放到 tomcat 目录下。</p><ul><li>Dockerfile</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># MAINTAINER        H.J.Yang &lt;yhj_box@foxmail.com&gt;</span></span><br><span class="line"><span class="comment"># DOCKER-VERSION    18.06.1-ce, build e68fc7a</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Dockerizing tomcat8/centos7: Dockerfile for building hello/docker images</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">FROM base/centos7:0.1</span><br><span class="line">MAINTAINER H.J.Yang &lt;yhj_box@foxmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把宿主机的拷贝到容器的指定目录下，COPY 也有可用拷贝，但是 ADD 有解压功能</span></span><br><span class="line">ADD jdk-8u181-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line">ADD apache-tomcat-8.0.53.tar.gz  /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变目录名称</span></span><br><span class="line">RUN mv /usr/<span class="built_in">local</span>/apache-tomcat-8.0.53 /usr/<span class="built_in">local</span>/tomcat8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_181</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/tomcat8</span><br><span class="line">ENV CATALINA_BASE /usr/<span class="built_in">local</span>/tomcat8</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器时启动 tomcat</span></span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/local/tomcat8/bin/catalina.sh"</span>,<span class="string">"run"</span>]</span><br></pre></td></tr></table></figure><ul><li><p>创建镜像<br><code>docker build -t tomcat8/centos7:0.1 .</code></p></li><li><p>运行容器<br><code>docker run -d -p 9000:8080 --name tomcat8 tomcat8/centos7:0.1</code></p></li><li><p>测试容器<br><code>wget localhost:9000</code> 这个命令会抓取到一个 index.html 文件。如果想要在非宿主机的浏览器访问需要打开防火墙，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9000/tcp</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建-Mysql-容器"><a href="#创建-Mysql-容器" class="headerlink" title="创建 Mysql 容器"></a>创建 Mysql 容器</h2><p>获取一个 MySQL 容器可以通过命令在之前创建的基础系统上安装 mysql 实现，也可以通过 pull 拉取现有的 mysql 镜像。</p><h3 id="使用-pull-拉去官方镜像"><a href="#使用-pull-拉去官方镜像" class="headerlink" title="使用 pull 拉去官方镜像"></a>使用 pull 拉去官方镜像</h3><p>命令： <code>docker pull mysql:5.7.17</code></p><h3 id="运行-mysql-容器"><a href="#运行-mysql-容器" class="headerlink" title="运行 mysql 容器"></a>运行 mysql 容器</h3><p>命令：<code>docker run -d -p 5555:3306 --name mysql5.7 -v /var/lib/mysql/:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.17</code>，执行后打开防火墙外部设备就通过宿主机 5555 端口访问到数据库容器。若其他容器数据库容器则需要通过数据库容器本身的 IP 地址和 3306 端口访问。</p><ul><li>参数：<br>-v：表示通过挂载卷的方式运行，可通过：<code>docker inspect &lt;containerID&gt;</code> 查看容器内部的信息。<br>-e: 表示环境变量和 Dockerfile 中 EVN 意思一样。<br>-p：表示把宿主机 5555 端口映射到容器的 3306 端口。</li></ul><h2 id="发布-Web-应用"><a href="#发布-Web-应用" class="headerlink" title="发布 Web 应用"></a>发布 Web 应用</h2><p>发布到 Tomcat 容器内部的 web 应用访问数据库不能通过宿主机的 IP 及端口访问，要通过数据容器的自己的 IP 地址和端口。</p><ul><li>查看数据容器的 IP，命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos3 mysql]<span class="comment"># docker inspect --format='&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;' mysql5.7</span></span><br><span class="line">172.17.0.2</span><br><span class="line">[root@centos3 mysql]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>得到 IP 地址就可以在 web 应用的 JDBC 中配置。</p><ul><li>发布 Web 项目<br>这里通过 <code>-v</code> 参数把 war 包挂载到 tomcat 容器内运行。此处就把 war 包放到宿主机的 tomcat 目录中。<br>命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:8080 -v /docker/tomcat/SimpleDemo.war:/usr/<span class="built_in">local</span>/tomcat8/webapps/SimpleDemo.war --name tomcat8 tomcat8/centos7:0.1</span><br></pre></td></tr></table></figure><p>打包时 jdbc 配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://172.17.0.2:3306/demo?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;allowMultiQueries=true</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><p>最后打开防火墙的 9999 端口就可以在非宿主机上通过浏览器范围了，如果不能达到预先的效果，可以通过 <code>docker logs -f containerName</code> 查看容器日志。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/15/docker/docker.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring MVC 源码初探</title>
    <link href="http://yoursite.com/2018/09/12/springmvc/"/>
    <id>http://yoursite.com/2018/09/12/springmvc/</id>
    <published>2018-09-12T11:54:11.717Z</published>
    <updated>2018-09-24T16:37:24.110Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/12/springmvc/DispatcherServlet.gif"></p><a id="more"></a> <h1 id="Spring-MVC-源码初探"><a href="#Spring-MVC-源码初探" class="headerlink" title="Spring MVC 源码初探"></a>Spring MVC 源码初探</h1><p><code>Servlet 3.0</code>，可以支持 Java 配置的方式。关于源码的部分就尝试用注解的方式分析，感觉内部的逻辑因该是没有啥变化吧。关于 <code>Spring MVC</code> 相关的文档我有翻译过一个 <a href="https://blog.csdn.net/V_Junk/article/details/80522702" target="_blank" rel="noopener">Part VI. The Web</a>,也可以到 <a href="https://github.com/yanghj7425/article/blob/master/spring/framework/PaSSSSrtVI.Web.md" target="_blank" rel="noopener">github</a> 下载。<br>在 Servlet3.0 中，容器会在类路径下查找 <code>javax.servlet.ServletContainerInitializer</code> 接口的实现类来配置 Servlet 的容器，在 Spring 中这个实现类是 <code>SpringServletContainerInitializer</code>。<code>SpringServletContainerInitializer</code> 这个类又会反过来查找实现了 <code>WebApplicationInitializer</code> 的类。</p><h2 id="SpringMvcInitializer"><a href="#SpringMvcInitializer" class="headerlink" title="SpringMvcInitializer"></a>SpringMvcInitializer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMvcInitializer</span> <span class="keyword">extends</span> <span class="title">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;RootConfig.class&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;ServletConfig.class&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"/"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面 <code>SpringMvcInitializer</code> 类通过这样简单的方式就初始化了一个 web 容器。没错这样一个基础的 Spring MVC 项目就可以跑起来了。看一下此时的类图：<br></p><p><img src="/2018/09/12/springmvc/SpringMvcInitializer.gif"><br><br>从这个图看来跟 xml 中需要配置的 <code>listener</code> 和 <code>DispatcherServlet</code> 也是很有关系。因为 class 加载机制，我们先从父类开始。</p><ol><li>WebApplicationInitializer 接口<br>在这个接口中，代码注释还是写的很全面的。xml 方式和 Java 配置的方法都介绍了，还有值得提的是：使用 xml 注册的 servlet 后，仍然可以使用 Java 配置的方式注册另一个 servlet。可以使用 <code>org.springframework.core.annotation.Order</code> 注解或者实现 <code>org.springframework.core.Ordered</code> 接口来保证调用的顺序。<br>这个接口只定义了一个接口：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>servletContext</code> 可以配置任何的 <code>servlets, filters, listeners, context-params, attributes</code> 来提供 Web 应用初始化必须的参数。</p><ol start="2"><li><p>AbstractContextLoaderInitializer 抽象类<br>声明了抽象方法 <code>createRootApplicationContext()</code> 注册 <code>RoogConfig.class</code> 配置类中声明的 bean</p></li><li><p>AbstractDispatcherServletInitializer 抽象类<br>声明了抽象方法 <code>registerDispatcherServlet()</code> 注册 <code>ServletConfig.class</code> 配置类中声明的 bean </p></li></ol><p>然后就发现，好像没了。并没有像解析 XML 或者注册 bean 那样通过接口或者其他的代理对我们配置文件里面的 bean 进行解析。</p><h2 id="SpringServletContainerInitializer"><a href="#SpringServletContainerInitializer" class="headerlink" title="SpringServletContainerInitializer"></a>SpringServletContainerInitializer</h2><p>这个是 Spring 提供的 <code>javax.servlet.ServletContainerInitializer</code> 接口的实现类。在 Servlet3.0 的容器中会自动被识别配置为 Servlet 容器。 正如开篇所言这个类会调用 <code>org.springframework.web.servlet.support.AbstractDispatcherServletInitializer#onStartup</code> 方法。</p><h3 id="注册启动-onStartup"><a href="#注册启动-onStartup" class="headerlink" title="注册启动 onStartup"></a>注册启动 onStartup</h3><p>在方法 <code>org.springframework.web.context.AbstractContextLoaderInitializer#onStartup()</code> 中注册了 ContextLoaderListener 对象。ContextLoaderListener 对象是 SerlvetContextListener 的实现类。容器 ServletContext 启动之后就会调用 contextInitialized 方法。先注册 ContextLoaderListener 然后再注册 DispatcherServlet，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.web.servlet.support.AbstractDispatcherServletInitializer#onStartup</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onStartup(servletContext); <span class="comment">// 调用父类方法注册 ContextLoaderListener</span></span><br><span class="line">registerDispatcherServlet(servletContext);  <span class="comment">// 注册 DispatcherServlet</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ContextLoaderListener"><a href="#ContextLoaderListener" class="headerlink" title="ContextLoaderListener"></a>ContextLoaderListener</h2><p>这里添加的时 createRootApplicationContext 创建 WebApplicationContext，如果创建 DispatcherServlet 的时候则是条用 <code>org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer()</code> 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerContextLoaderListener</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建了 AnnotationConfigWebApplicationContext 对象</span></span><br><span class="line">WebApplicationContext rootAppContext = createRootApplicationContext();</span><br><span class="line"><span class="keyword">if</span> (rootAppContext != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 添加到 ContextLoaderListener 的  this.context 中</span></span><br><span class="line">ContextLoaderListener listener = <span class="keyword">new</span> ContextLoaderListener(rootAppContext);</span><br><span class="line">listener.setContextInitializers(getRootApplicationContextInitializers());</span><br><span class="line">servletContext.addListener(listener);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">logger.debug(<span class="string">"No ContextLoaderListener registered, as "</span> +</span><br><span class="line"><span class="string">"createRootApplicationContext() did not return an application context"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述方法添加了一个 AnnotationConfigWebApplicationContext 对象到 ContextLoaderLister 中。文档中说：对于多个 <code>@Configuration</code> 注解配置类，后面的 <code>@Bean</code> 定义将复写前面的定义。在上面的方法中，<code>createRootApplicationContext()</code> 方法有必要再看一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer#createRootApplicationContext</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Class&lt;?&gt;[] configClasses = getRootConfigClasses();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">AnnotationConfigWebApplicationContext rootAppContext = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">rootAppContext.register(configClasses);</span><br><span class="line"><span class="keyword">return</span> rootAppContext;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>getRootConfigClasses()</code> 方法在自定义的 <code>SpringMvcInitializer</code> 类中被实现，并返回 <code>RootConfig.class</code> 配置类。这里可以看出 <code>getRootConfigClasses()</code> 方法返回的类中标识过 <code>@Configuration</code> 注解的类，会通过 ContextLoaderListener 初始化到 ServletContext 中。</p><h3 id="WebApplicationContext"><a href="#WebApplicationContext" class="headerlink" title="WebApplicationContext"></a>WebApplicationContext</h3><p>由于 ContextLoaderListener 接口实现了 ServletContextListener 接口，所以在所有 Filter 和 Servlet 被初始化之前会通知 ServletContextListener 的 <code>contextInitialized()</code> 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line"><span class="comment">// event.getServletContext() 方法返回 ContextLoaderListener 创建时添加的 AnnotationConfigWebApplicationContext </span></span><br><span class="line">initWebApplicationContext(event.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处也是委托给 <code>org.springframework.web.context.ContextLoader#initWebApplicationContext</code> 方法，方法中有一行代码：<code>servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);</code> 把初始化过的 applicationContext 添加到 servletContext 中。这里有一个疑问：事务处理失效的问题(先摆在这里)。</p><h2 id="DispatcherServlet"><a href="#DispatcherServlet" class="headerlink" title="DispatcherServlet"></a>DispatcherServlet</h2><p>然后是把 <code>getServletConfigClasses()</code> 方法中标识过 <code>@Configuration</code> 注解的类，注册到 WebApplicationContext 后，由 DispatcherServlet 添加到 <code>javax.servlet.ServletRegistration.Dynamic</code>。</p><ul><li>见代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 添加配置类到 WebApplicationContext</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createServletApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AnnotationConfigWebApplicationContext servletAppContext = <span class="keyword">new</span> AnnotationConfigWebApplicationContext();</span><br><span class="line">Class&lt;?&gt;[] configClasses = getServletConfigClasses();</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(configClasses)) &#123;</span><br><span class="line">servletAppContext.register(configClasses);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> servletAppContext;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// DispatcherServlet 添加到 Servlet 容器</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerDispatcherServlet</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">String servletName = getServletName();</span><br><span class="line">Assert.hasLength(servletName, <span class="string">"getServletName() must not return empty or null"</span>);</span><br><span class="line"></span><br><span class="line">WebApplicationContext servletAppContext = createServletApplicationContext();</span><br><span class="line">Assert.notNull(servletAppContext,</span><br><span class="line"><span class="string">"createServletApplicationContext() did not return an application "</span> +</span><br><span class="line"><span class="string">"context for servlet ["</span> + servletName + <span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">FrameworkServlet dispatcherServlet = createDispatcherServlet(servletAppContext);</span><br><span class="line">dispatcherServlet.setContextInitializers(getServletApplicationContextInitializers());</span><br><span class="line"></span><br><span class="line">ServletRegistration.Dynamic registration = servletContext.addServlet(servletName, dispatcherServlet);</span><br><span class="line">       ... 略</span><br></pre></td></tr></table></figure><p>通过观察 servletAppContext 与 rootAppContext 的创建过程，区别：</p><ol><li>返回的配置类不同</li><li><p>和后续的处理方式不同 rootAppContext 时添加到 ContextLoaderListener 后把 listener 加入 servletContext，servletAppContext 封装成 dispatcherServlet 后添加到 servletContext，这里 DispatcherServlet 也是一个 Servlet，在容器启动的时候就会执行相应的 <code>init()</code> 方法。</p><ul><li>DispatcherServlet 类图：<br><img src="/2018/09/12/springmvc/DispatcherServletStructure.gif"><br>这里再梳理一下，启动的时候 Servlet 容器会找到 <code>javax.servlet.ServletContainerInitializer</code> 的实现类 SpringServletContainerInitializer，这个接口通过类注解 <code>@HandlesTypes(WebApplicationInitializer.class)</code> 找到 WebApplicationInitializer。然后开始初始化，跟踪代码发得知，HttpServlet 与 GenericServlet 的 init() 方法并没有对容器作初始化操作。实质的操作在 <code>org.springframework.web.servlet.FrameworkServlet#initServletBean()</code> 方法。 其核心代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">initFrameworkServlet();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exceltion e)&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="WebApplicationContext-初始化"><a href="#WebApplicationContext-初始化" class="headerlink" title="WebApplicationContext 初始化"></a>WebApplicationContext 初始化</h3><p>WebApplicationContext 是在创建 ContextLoaderListener 时创建的 AnnotationConfigWebApplicationContext 对象。这里对其进一步初始化操作，代码就不贴出来了,参看方法 <code>org.springframework.web.servlet.FrameworkServlet#initWebApplicationContext</code>。首先通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebApplicationContext rootContext =</span><br><span class="line">WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br></pre></td></tr></table></figure></p><p>取出已经创建好的 webApplicationContext，initWebApplicationContext() 方法中  this.webApplicationContext 不会为空，因为在注册 dispatcherServlet 的时候已经放入了 servletAppContext 对象。初始化会调用 <code>configureAndRefreshWebApplicationContext()</code> 进行上下文的配置刷新。<br></p><p>FrameworkServlet 类中的 <code>onRefresh()</code> 方法，在子类 DispatcherServlet 中被实现，其也是调用 <code>initStrategies()</code> 方法。都是进行一些必要的初始化操作，详情如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">initMultipartResolver(context);</span><br><span class="line">initLocaleResolver(context);</span><br><span class="line">initThemeResolver(context);</span><br><span class="line">initHandlerMappings(context);</span><br><span class="line">initHandlerAdapters(context);</span><br><span class="line">initHandlerExceptionResolvers(context);</span><br><span class="line">initRequestToViewNameTranslator(context);</span><br><span class="line">initViewResolvers(context);</span><br><span class="line">initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h4><p>当发生 request 时 DispatcherServlet 会把请求交给 HandlerMapping，HandlerMapping 根据 WebApplicationContext 的配置回传给 DispatcherServlet 相应的 Controller。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMappings</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerMappings) &#123;</span><br><span class="line"><span class="comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class="line">BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = <span class="keyword">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());</span><br><span class="line"><span class="comment">// We keep HandlerMappings in sorted order.</span></span><br><span class="line">AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerMappings);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line"><span class="comment">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class="line"><span class="comment">// a default HandlerMapping if no other mappings are found.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"No HandlerMappings found in servlet '"</span> + getServletName() + <span class="string">"': using default"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出 HandlerMapping 可以有多个且 <code>this.detectAllHandlerMappings</code> 默认值为 true，也就是默认发现所有实现了 HandlerMapping 的 bean。可以通过复写 <code>org.springframework.web.servlet.support.AbstractDispatcherServletInitializer#customizeRegistration()</code> 来实现初始值的设置。在这个方法中还可以设置文件临时目录、大小等，实例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizeRegistration</span><span class="params">(ServletRegistration.Dynamic registration)</span> </span>&#123;</span><br><span class="line">      MultipartConfigElement multipartConfigElement = <span class="keyword">new</span> MultipartConfigElement(<span class="string">"/tmp/uploads"</span>, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="number">4</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line">      registration.setInitParameter(<span class="string">"detectAllHandlerMappings"</span>, <span class="string">"false"</span>);</span><br><span class="line">      registration.setMultipartConfig(multipartConfigElement);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>如果没有找到定义的 handlerMapping 则会根据 DispatcherServlet 类目录下的 DispatcherServlet.properties 的定义创建。<code>getDefaultStrategies()</code> 方法通过读取 defaultStrategies 属性来创建 handlerMapping。defaultStrategies 则由以下代码初始化：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// Load default strategy implementations from properties file.</span></span><br><span class="line"><span class="comment">// This is currently strictly internal and not meant to be customized</span></span><br><span class="line"><span class="comment">// by application developers.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(DEFAULT_STRATEGIES_PATH, DispatcherServlet.class);</span><br><span class="line">defaultStrategies = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not load '"</span> + DEFAULT_STRATEGIES_PATH + <span class="string">"': "</span> + ex.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>常量：<code>DEFAULT_STRATEGIES_PATH</code> 的值为：DispatcherServlet.properties。</p><ul><li>加载 properties 文件<br>ClassPathResource 构造器传入属性文件名和类，属性加载时通过工具类 <code>PropertiesLoaderUtils</code> 完成，大体过程如下：</li></ul><ol><li><p>PropertiesLoaderUtils.loadProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">loadProperties</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">fillProperties(props, resource);</span><br><span class="line"><span class="keyword">return</span> props;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>fillProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fillProperties</span><span class="params">(Properties props, Resource resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">InputStream is = resource.getInputStream();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String filename = resource.getFilename();</span><br><span class="line"><span class="keyword">if</span> (filename != <span class="keyword">null</span> &amp;&amp; filename.endsWith(XML_FILE_EXTENSION)) &#123; <span class="comment">// 常量 XML_FILE_EXTENSION = ".xml"</span></span><br><span class="line">props.loadFromXML(is);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">props.load(is);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h4><p>很明显，这是一个典型的适配器模式。其初始化逻辑跟 HandlerMapping 类似，默认情况下还是从 <code>DispatcherServlet.properties</code> 文件中加载。</p><ul><li><p>HTTP 请求处理适配器：HttpRequestHandlerAdapter<br>  仅仅支持对 HTTP 请求处理器的适配。简单的将 HTTP 请求对象和响应对象传递给 HTTP 请求处理器的实现，不需求要返回值，主要用在基于 HTTP 的远程调用上。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpRequestHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Process the given request, generating a response.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException in case of general errors</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> IOException in case of I/O errors</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简单控制器处理适配器：SimpleControllerHandlerAdapter<br>  实现将 HTTP 请求适配到一个控制器的实现进行处理。</p></li><li><p>注解方法处理器适配器：AnnotationMethodHandlerAdapter<br>  它需要结合注解映射和注解方法处理器协同工作。通过解析声明在出街控制器的请求映射信息来解析相应的处理器方法来处理当前的 HTTP 请求。</p></li></ul><h4 id="HandlerExceptionResolver"><a href="#HandlerExceptionResolver" class="headerlink" title="HandlerExceptionResolver"></a>HandlerExceptionResolver</h4><p>初始化过程和 HandlerMapping。基于 HandlerExceptionResolver 的异常解析，Spring 会搜索所有实现了 HandlerExceptionResolver 接口并注册在环境中的 bean，挨个执行，直到返回一个 ModelAndView 对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">request.setAttribute(<span class="string">"exception "</span>, ex.toString());</span><br><span class="line">request.setAttribute(<span class="string">"exceptionStack"</span>, ex);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"error/exception"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RequestToViewNameTranslator"><a href="#RequestToViewNameTranslator" class="headerlink" title="RequestToViewNameTranslator"></a>RequestToViewNameTranslator</h4><p>To be continue</p><h3 id="DispatcherServlet-处理逻辑"><a href="#DispatcherServlet-处理逻辑" class="headerlink" title="DispatcherServlet 处理逻辑"></a>DispatcherServlet 处理逻辑</h3><p> To be continue</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/09/12/springmvc/DispatcherServlet.gif&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="sources" scheme="http://yoursite.com/categories/sources/"/>
    
    
  </entry>
  
</feed>
